#! /bin/bash

##
#/
#/ @PROGRAM@ allows to filter a JSON list of meals returned by list-available-lunches.
#/
#/ Usage:
#/
#/ ./list-available-lunches | @PROGRAM@ [OPTIONS]
#/
#/ OPTIONS:
#/
#/     -m <meal_name>       Filter using the meal name specified.
#/     -r <restaurant_name> Filter using the restaurant name specified.
#/
#/ Example:
#/
#/     ./list-available-lunches | ./filter-lunches -r "Assenheims 56 - Great Tower St."
#/
##

where_am_i="${0%/*}"
source "${where_am_i}/common"

jq_filters=""
addFilter() {
    [[ -z "${jq_filters}" ]] || jq_filters+=" and "
    filter_name="${1}"
    filter_value="${2}"
    jq_filters+="((.${filter_name}//empty) | match(\"${filter_value}\"))"
}

meal_name=""
restaurant_name=""
while getopts "hm:r:" option_name; do
    case $option_name in
        m) meal_name="${OPTARG:-}";;
        r) restaurant_name="${OPTARG:-}";;
        h) usage;;
    esac
done


[[ -z "${meal_name}" ]] || addFilter "meal_name" "${meal_name}"
[[ -z "${restaurant_name}" ]] || addFilter "restaurant_name" "${restaurant_name}"

[[ -n "${jq_filters}" ]] || usage "No filter specified."

debug "jq '[.[] | select(${jq_filters})]'"
result=$(jq "[.[] | select(${jq_filters})]")

[[ -n "${result}" ]] || die "Meal specified is not available."

echo "${result}" | jq '.'
