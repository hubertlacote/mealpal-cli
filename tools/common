#! /bin/bash

set -u
set -e
set -o pipefail

script_name=${0##*/}

RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NO_COLOUR='\033[0m'

info() {
    echo -e "${BLUE}${script_name}: Info: ${1:-}${NO_COLOUR}"
}

warn() {
    echo -e "${YELLOW}${script_name}: Warning: ${1:-}${NO_COLOUR}"
}

error() {
    echo -e "${RED}${script_name}: Error: ${1:-}${NO_COLOUR}" >&2
}

die() {
    error "${1:-}"
    exit 1
}

usage() {
    [[ -z "${1:-}" ]] || error "${1:-}"
    grep '^#/' $0 | cut -c 4- | sed \
        -e "s/@PROGRAM@/${script_name}/g" >&2
    exit 1;
}

format_date() {
    local d="${1}"
    date "+%Y/%m/%d" -d "${d}"
}

is_past_date() {
    local date_to_check="${1}"
    local epoch_to_check
    local current_epoch
    current_epoch=$(date +%s)
    epoch_to_check=$(date "+%s" -d "${date_to_check}")
    [[ $(( epoch_to_check - current_epoch )) -le 0 ]]
}

is_future_date() {
    local date_to_check="${1}"
    local epoch_to_check
    local current_epoch
    current_epoch=$(date +%s)
    epoch_to_check=$(date "+%s" -d "${date_to_check}")
    [[ $(( epoch_to_check - current_epoch )) -ge 0 ]]
}

book_lunch() {
    local lunch_date="${1}"
    local restaurant="${2}"
    local meal="${3}"

    local booking_opening_time="17:00:00"
    local booking_time="17:01:00"
    local booking_closing_time="10:30:00"

    local booking_opening_date
    local readable_booking_datetime
    local readable_lunch_date

    booking_opening_date=$(format_date "${lunch_date} - 1 day")
    readable_booking_datetime=$(date "+%A %d/%m/%Y %H:%M:%S" -d "${booking_opening_date} ${booking_time}")
    readable_lunch_date=$(date "+%A %d/%m/%Y" -d "${lunch_date}")

    if is_past_date "${lunch_date} ${booking_closing_time}"; then
        info "Too late to book lunch on ${readable_lunch_date}"
        return 0
    fi

    echo ""
    info "Booking lunch '${meal}' at '${restaurant}' on ${readable_lunch_date}"

    if is_future_date "${booking_opening_date} ${booking_opening_time}"; then
        local booking_datetime
        booking_datetime=$(date "+%Y/%m/%d %H:%M:%S" -d "${booking_opening_date} ${booking_time}")
        info "Waiting until booking opens - ${readable_booking_datetime}..."
        "${where_am_i}"/tools/sleep-until -d "${booking_datetime}"
    fi

    (
        "${where_am_i}"/tools/list-available-lunches | \
            "${where_am_i}"/tools/filter-lunches -r "${restaurant}" -m "${meal}" | \
                "${where_am_i}"/tools/book-first-lunch
    ) || {
        info "Failed to book lunch"
        return 1
    }

    return 0
}

call_api() {
  curl -s $@ -H "origin: https://secure.mealpal.com" -H "accept-encoding: gzip, deflate, br" -H "accept-language: en-GB,en;q=0.9,en-US;q=0.8,fr;q=0.7" -H "pragma: no-cache" -H "user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36" -H "content-type: application/json;charset=UTF-8" -H "accept: application/json" -H "cache-control: no-cache" -H "authority: secure.mealpal.com" -H "referer: https://secure.mealpal.com/lunch" -H "dnt: 1" -H "cookie: _mealpal_session=${mealpal_session};" --compressed
}
